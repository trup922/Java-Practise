import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;
import java.util.Properties;
import org.apache.kafka.clients.producer.Producer;
import org.apache.kafka.clients.producer.ProducerRecord;
import org.apache.kafka.clients.producer.KafkaProducer;
import org.apache.kafka.common.serialization.StringSerializer;

public class KafkaProducerExample extends Application {
    private static final String TOPIC_NAME = "your-topic-name";
    private static final String BOOTSTRAP_SERVERS = "localhost:9092";

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage primaryStage) {
        primaryStage.setTitle("Kafka Producer");

        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(5);
        grid.setHgap(5);

        // Bootstrap Servers
        Label bootstrapLabel = new Label("Bootstrap Servers:");
        GridPane.setConstraints(bootstrapLabel, 0, 0);
        TextField bootstrapInput = new TextField();
        bootstrapInput.setPromptText("Bootstrap Servers");
        GridPane.setConstraints(bootstrapInput, 1, 0);

        // Topic Name
        Label topicLabel = new Label("Topic Name:");
        GridPane.setConstraints(topicLabel, 0, 1);
        TextField topicInput = new TextField();
        topicInput.setPromptText("Topic Name");
        GridPane.setConstraints(topicInput, 1, 1);

        // Key
        Label keyLabel = new Label("Key:");
        GridPane.setConstraints(keyLabel, 0, 2);
        TextField keyInput = new TextField();
        keyInput.setPromptText("Key");
        GridPane.setConstraints(keyInput, 1, 2);

        // Value
        Label valueLabel = new Label("Value:");
        GridPane.setConstraints(valueLabel, 0, 3);
        TextField valueInput = new TextField();
        valueInput.setPromptText("Value");
        GridPane.setConstraints(valueInput, 1, 3);

        // Send Button
        Button sendButton = new Button("Send");
        GridPane.setConstraints(sendButton, 1, 4);
        sendButton.setOnAction(e -> {
            String bootstrapServers = bootstrapInput.getText();
            String topicName = topicInput.getText();
            String key = keyInput.getText();
            String value = valueInput.getText();
            sendToKafka(bootstrapServers, topicName, key, value);
        });

        grid.getChildren().addAll(bootstrapLabel, bootstrapInput, topicLabel, topicInput, keyLabel, keyInput,
                valueLabel, valueInput, sendButton);

        Scene scene = new Scene(grid, 300, 200);
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    private void sendToKafka(String bootstrapServers, String topicName, String key, String value) {
        // Configure the producer
        Properties props = new Properties();
        props.put("bootstrap.servers", bootstrapServers);
        props.put("key.serializer", StringSerializer.class.getName());
        props.put("value.serializer", StringSerializer.class.getName());

        Producer<String, String> producer = new KafkaProducer<>(props);

        try {
            // Create a producer record with the topic name and the data to be sent
            ProducerRecord<String, String> record = new ProducerRecord<>(topicName, key, value);

            // Send the record to the Kafka topic
            producer.send(record);
            System.out.println("Data sent successfully to the Kafka topic: " + topicName);
        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("Failed to send data to the Kafka topic: " + topicName);
        } finally {
            // Close the producer
            producer.close();
        }
    }
}
