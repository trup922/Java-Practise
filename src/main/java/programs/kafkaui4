import org.apache.kafka.clients.consumer.*;
import org.apache.kafka.common.serialization.StringDeserializer;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.*;
import java.util.List;
import java.util.Properties;

public class KafkaSwingUIApp extends JFrame {

    private JComboBox<String> environmentDropdown;
    private JTextField topicTextField;
    private JTextField messageCountTextField;
    private JTextArea messageTextArea;
    private JButton retrieveButton;

    private KafkaConsumer<String, String> consumer;

    public KafkaSwingUIApp() {
        initializeUI();
        initializeKafkaConsumer();
    }

    private void initializeUI() {
        setTitle("Kafka Swing UI App");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new FlowLayout());

        environmentDropdown = new JComboBox<>(new String[]{"dev", "test", "preprod"});
        add(new JLabel("Environment:"));
        add(environmentDropdown);

        topicTextField = new JTextField(20);
        add(new JLabel("Topic:"));
        add(topicTextField);

        messageCountTextField = new JTextField(10);
        add(new JLabel("Message Count:"));
        add(messageCountTextField);

        retrieveButton = new JButton("Retrieve");
        retrieveButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                retrieveMessages();
            }
        });
        add(retrieveButton);

        messageTextArea = new JTextArea(10, 30);
        messageTextArea.setEditable(false);
        JScrollPane scrollPane = new JScrollPane(messageTextArea);
        add(scrollPane);

        pack();
        setVisible(true);
    }

    private void initializeKafkaConsumer() {
        Properties properties = new Properties();
        properties.setProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, "localhost:9090");
        properties.setProperty(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());
        properties.setProperty(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());

        consumer = new KafkaConsumer<>(properties);
    }

    private void retrieveMessages() {
        String environment = environmentDropdown.getSelectedItem().toString();
        String topic = topicTextField.getText();
        int messageCount = Integer.parseInt(messageCountTextField.getText());

        // Subscribe to the topic
        consumer.subscribe(Collections.singletonList(topic));

        // Poll for records
        ConsumerRecords<String, String> records = consumer.poll(Duration.ofSeconds(10));

        // Sort the records in descending order based on timestamp (assuming timestamps are present)
        List<ConsumerRecord<String, String>> sortedRecords = new ArrayList<>(records.records(topic));
        sortedRecords.sort((r1, r2) -> Long.compare(r2.timestamp(), r1.timestamp()));

        // Display the retrieved messages
        messageTextArea.setText("");
        for (int i = 0; i < messageCount && i < sortedRecords.size(); i++) {
            ConsumerRecord<String, String> record = sortedRecords.get(i);
            messageTextArea.append(record.value() + "\n");
        }

        consumer.unsubscribe();
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                new KafkaSwingUIApp();
            }
        });
    }
}
