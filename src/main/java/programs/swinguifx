import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Properties;
import org.apache.kafka.clients.producer.Producer;
import org.apache.kafka.clients.producer.ProducerRecord;
import org.apache.kafka.clients.producer.KafkaProducer;
import org.apache.kafka.common.serialization.StringSerializer;

public class KafkaProducerExample extends JFrame {
    private static final String TOPIC_NAME = "your-topic-name";
    private static final String BOOTSTRAP_SERVERS = "localhost:9092";

    public static void main(String[] args) {
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                createAndShowGUI();
            }
        });
    }

    private static void createAndShowGUI() {
        KafkaProducerExample example = new KafkaProducerExample();
        example.setTitle("Kafka Producer");
        example.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        example.addComponentsToPane();
        example.pack();
        example.setVisible(true);
    }

    private void addComponentsToPane() {
        JPanel panel = new JPanel(new GridBagLayout());
        GridBagConstraints constraints = new GridBagConstraints();
        constraints.insets = new Insets(10, 10, 10, 10);

        // Bootstrap Servers
        JLabel bootstrapLabel = new JLabel("Bootstrap Servers:");
        constraints.gridx = 0;
        constraints.gridy = 0;
        panel.add(bootstrapLabel, constraints);

        JTextField bootstrapInput = new JTextField(20);
        bootstrapInput.setToolTipText("Bootstrap Servers");
        constraints.gridx = 1;
        constraints.gridy = 0;
        panel.add(bootstrapInput, constraints);

        // Topic Name
        JLabel topicLabel = new JLabel("Topic Name:");
        constraints.gridx = 0;
        constraints.gridy = 1;
        panel.add(topicLabel, constraints);

        JTextField topicInput = new JTextField(20);
        topicInput.setToolTipText("Topic Name");
        constraints.gridx = 1;
        constraints.gridy = 1;
        panel.add(topicInput, constraints);

        // Key
        JLabel keyLabel = new JLabel("Key:");
        constraints.gridx = 0;
        constraints.gridy = 2;
        panel.add(keyLabel, constraints);

        JTextField keyInput = new JTextField(20);
        keyInput.setToolTipText("Key");
        constraints.gridx = 1;
        constraints.gridy = 2;
        panel.add(keyInput, constraints);

        // Value
        JLabel valueLabel = new JLabel("Value:");
        constraints.gridx = 0;
        constraints.gridy = 3;
        panel.add(valueLabel, constraints);

        JTextField valueInput = new JTextField(20);
        valueInput.setToolTipText("Value");
        constraints.gridx = 1;
        constraints.gridy = 3;
        panel.add(valueInput, constraints);

        // Send Button
        JButton sendButton = new JButton("Send");
        constraints.gridx = 1;
        constraints.gridy = 4;
        panel.add(sendButton, constraints);

        sendButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                String bootstrapServers = bootstrapInput.getText();
                String topicName = topicInput.getText();
                String key = keyInput.getText();
                String value = valueInput.getText();
                sendToKafka(bootstrapServers, topicName, key, value);
            }
        });

        getContentPane().add(panel);
    }

    private void sendToKafka(String bootstrapServers, String topicName, String key, String value) {
        // Configure the producer
        Properties props = new Properties();
        props.put("bootstrap.servers", bootstrapServers);
        props.put("key.serializer", StringSerializer.class.getName());
        props.put("value.serializer", StringSerializer.class.getName());

        Producer<String, String> producer = new KafkaProducer<>(props);

        try {
            // Create a producer record with the topic name and the data to be sent
            ProducerRecord<String, String> record = new ProducerRecord<>(topicName, key, value);

            // Send the record to the Kafka topic
            producer.send(record);
            System.out.println("Data sent successfully to the Kafka topic: " + topicName);
        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("Failed to send data to the Kafka topic: " + topicName);
        } finally {
            // Close the producer
            producer.close();
        }
    }
}
